{"name":"Batteries.Data.ByteArray","instances":[],"imports":["Init","Batteries.Tactic.Alias"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L180-L183","name":"ByteArray.map","line":180,"kind":"def","docLink":"./Batteries/Data/ByteArray.html#ByteArray.map","doc":"`map f a` applies the function `f` to each element of the array. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.map\"><span class=\"name\">ByteArray</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L172-L178","name":"ByteArray.mapM","line":172,"kind":"def","docLink":"./Batteries/Data/ByteArray.html#ByteArray.mapM","doc":"`mapM f a` applies the monadic function `f` to each element of the array. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.mapM\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mapM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L164-L170","name":"ByteArray.mapMUnsafe.loop","line":164,"kind":"def","docLink":"./Batteries/Data/ByteArray.html#ByteArray.mapMUnsafe.loop","doc":"Inner loop for `mapMUnsafe`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.mapMUnsafe.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mapMUnsafe</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k s : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L152-L170","name":"ByteArray.mapMUnsafe","line":152,"kind":"def","docLink":"./Batteries/Data/ByteArray.html#ByteArray.mapMUnsafe","doc":"Unsafe optimized implementation of `mapM`.\n\nThis function is unsafe because it relies on the implementation limit that the size of an array is\nalways less than `USize.size`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.mapMUnsafe\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mapMUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L134-L135","name":"ByteArray.getElem_ofFn","line":134,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.getElem_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.getElem_ofFn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">getElem_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span>)</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L130-L132","name":"ByteArray.get_ofFn","line":130,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.get_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.get_ofFn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span>)</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span>)</span>.get</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L127-L128","name":"ByteArray.size_ofFn","line":127,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.size_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.size_ofFn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L125-L125","name":"ByteArray.ofFn_data","line":125,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.ofFn_data","doc":"**Alias** of `ByteArray.data_ofFn`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.ofFn_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ofFn_data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.ofFn\">Array.ofFn</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L124-L124","name":"ByteArray.data_ofFn","line":124,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.data_ofFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.data_ofFn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">data_ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/ByteArray.html#ByteArray.ofFn\">ByteArray.ofFn</a> <span class=\"fn\">f</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.ofFn\">Array.ofFn</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L120-L122","name":"ByteArray.ofFn","line":120,"kind":"def","docLink":"./Batteries/Data/ByteArray.html#ByteArray.ofFn","doc":"- `ofFn f` with `f : Fin n → UInt8` returns the byte array whose `i`th element is `f i`. -"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.ofFn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L114-L116","name":"ByteArray.get_extract","line":114,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.get_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.get_extract\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{start stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.extract</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span>)</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.extract</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\"><span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L109-L112","name":"ByteArray.get_extract_aux","line":109,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.get_extract_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.get_extract_aux\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_extract_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{start stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.extract</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span>)</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L105-L107","name":"ByteArray.size_extract","line":105,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.size_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.size_extract\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_extract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.extract</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">stop</span> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">start</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L103-L103","name":"ByteArray.extract_data","line":103,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.extract_data","doc":"**Alias** of `ByteArray.data_extract`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.extract_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">extract_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.extract</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.extract</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L97-L102","name":"ByteArray.data_extract","line":97,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.data_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.data_extract\"><span class=\"name\">ByteArray</span>.<span class=\"name\">data_extract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.extract</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.extract</span> <span class=\"fn\">start</span> <span class=\"fn\">stop</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L90-L93","name":"ByteArray.get_append_right","line":90,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.get_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.get_append_right\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hle : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.size</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>)</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.size</span></span> := <span class=\"fn\">⋯</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>[<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L85-L88","name":"ByteArray.get_append_left","line":85,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.get_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.get_append_left\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hlt : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>)</span>.size</span></span> := <span class=\"fn\">⋯</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\">i</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L82-L83","name":"ByteArray.size_append","line":82,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.size_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.size_append\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.size</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.size</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L80-L80","name":"ByteArray.append_data","line":80,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.append_data","doc":"**Alias** of `ByteArray.data_append`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.append_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">append_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">b</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L77-L79","name":"ByteArray.data_append","line":77,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.data_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.data_append\"><span class=\"name\">ByteArray</span>.<span class=\"name\">data_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">b</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L75-L75","name":"ByteArray.append_eq","line":75,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.append_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.append_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">append_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.append</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L71-L71","name":"ByteArray.copySlice_data","line":71,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.copySlice_data","doc":"**Alias** of `ByteArray.data_copySlice`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.copySlice_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">copySlice_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exact : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.copySlice</span> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">j</span> <span class=\"fn\">len</span> <span class=\"fn\">exact</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.data</span>.extract</span> <span class=\"fn\">0</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.extract</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">len</span>)</span></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.data</span>.extract</span> <span class=\"fn\">(<span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">len</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.size</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span>)</span></span>)</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.data</span>.size</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L68-L70","name":"ByteArray.data_copySlice","line":68,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.data_copySlice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.data_copySlice\"><span class=\"name\">ByteArray</span>.<span class=\"name\">data_copySlice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exact : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.copySlice</span> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">j</span> <span class=\"fn\">len</span> <span class=\"fn\">exact</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.data</span>.extract</span> <span class=\"fn\">0</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.extract</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">len</span>)</span></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.data</span>.extract</span> <span class=\"fn\">(<span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">len</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.size</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span>)</span></span>)</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.data</span>.size</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L62-L64","name":"ByteArray.set_set","line":62,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.set_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.set_set\"><span class=\"name\">ByteArray</span>.<span class=\"name\">set_set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v v' : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">⋯</span>)</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v'</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v'</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L58-L60","name":"ByteArray.get_set_ne","line":58,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.get_set_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.get_set_ne\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_set_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">⋯</span>)</span>[<span class=\"fn\">j</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\">j</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L55-L56","name":"ByteArray.get_set_eq","line":55,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.get_set_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.get_set_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_set_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">⋯</span>)</span>[<span class=\"fn\">↑<span class=\"fn\">i</span></span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L51-L53","name":"ByteArray.size_set","line":51,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.size_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.size_set\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">⋯</span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L49-L49","name":"ByteArray.set_data","line":49,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.set_data","doc":"**Alias** of `ByteArray.data_set`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.set_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">set_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">⋯</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L47-L48","name":"ByteArray.data_set","line":47,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.data_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.data_set\"><span class=\"name\">ByteArray</span>.<span class=\"name\">data_set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">⋯</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.set</span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L41-L43","name":"ByteArray.get_push_lt","line":41,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.get_push_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.get_push_lt\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_push_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.push</span> <span class=\"fn\">x</span>)</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\">i</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L38-L39","name":"ByteArray.get_push_eq","line":38,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.get_push_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.get_push_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get_push_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.push</span> <span class=\"fn\">x</span>)</span>[<span class=\"fn\"><span class=\"fn\">a</span>.size</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L35-L36","name":"ByteArray.size_push","line":35,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.size_push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.size_push\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.push</span> <span class=\"fn\">b</span>)</span>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.size</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L33-L33","name":"ByteArray.push_data","line":33,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.push_data","doc":"**Alias** of `ByteArray.data_push`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.push_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">push_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.push</span> <span class=\"fn\">b</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.push</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L32-L32","name":"ByteArray.data_push","line":32,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.data_push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.data_push\"><span class=\"name\">ByteArray</span>.<span class=\"name\">data_push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.push</span> <span class=\"fn\">b</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>.push</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L28-L28","name":"ByteArray.size_empty","line":28,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.size_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.size_empty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.empty\">ByteArray.empty</a>.size</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L26-L26","name":"ByteArray.empty_data","line":26,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.empty_data","doc":"**Alias** of `ByteArray.data_empty`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.empty_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">empty_data</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.empty\">ByteArray.empty</a>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L25-L25","name":"ByteArray.data_empty","line":25,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.data_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.data_empty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">data_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.empty\">ByteArray.empty</a>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L23-L23","name":"ByteArray.mkEmpty_data","line":23,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.mkEmpty_data","doc":"**Alias** of `ByteArray.data_mkEmpty`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.mkEmpty_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mkEmpty_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cap : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.mkEmpty\">ByteArray.mkEmpty</a> <span class=\"fn\">cap</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L22-L22","name":"ByteArray.data_mkEmpty","line":22,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.data_mkEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.data_mkEmpty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">data_mkEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cap : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.mkEmpty\">ByteArray.mkEmpty</a> <span class=\"fn\">cap</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">#[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L17-L18","name":"ByteArray.uset_eq_set","line":17,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.uset_eq_set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.uset_eq_set\"><span class=\"name\">ByteArray</span>.<span class=\"name\">uset_eq_set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.toNat</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.uset</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.set</span> <span class=\"fn\"><span class=\"fn\">i</span>.toNat</span> <span class=\"fn\">v</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L13-L13","name":"ByteArray.getElem_eq_data_getElem","line":13,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.getElem_eq_data_getElem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.getElem_eq_data_getElem\"><span class=\"name\">ByteArray</span>.<span class=\"name\">getElem_eq_data_getElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.size</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>[<span class=\"fn\">i</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span>[<span class=\"fn\">i</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/ByteArray.lean#L10-L10","name":"ByteArray.ext","line":10,"kind":"theorem","docLink":"./Batteries/Data/ByteArray.html#ByteArray.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteArray.html#ByteArray.ext\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a b : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.data</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"}]}