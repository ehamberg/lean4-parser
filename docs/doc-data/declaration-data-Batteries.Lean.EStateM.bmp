{"name":"Batteries.Lean.EStateM","instances":[],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Lean/EStateM.lean#L36-L36","name":"EStateM.ext","line":36,"kind":"theorem","docLink":"./Batteries/Lean/EStateM.html#EStateM.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.ext\"><span class=\"name\">EStateM</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε σ α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x y : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.run</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.run</span> <span class=\"fn\">s</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Lean/EStateM.lean#L33-L34","name":"EStateM.run_map","line":33,"kind":"theorem","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_map\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α β ε σ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span>.run</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">EStateM.Result.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.run</span> <span class=\"fn\">s</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Lean/EStateM.lean#L27-L29","name":"EStateM.Result.map_eq_error","line":27,"kind":"theorem","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_error","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_error\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_eq_error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε σ α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">EStateM.Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">EStateM.Result.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">EStateM.Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">EStateM.Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Lean/EStateM.lean#L23-L25","name":"EStateM.Result.map_eq_ok","line":23,"kind":"theorem","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_ok","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_ok\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_eq_ok</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε σ α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">EStateM.Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">EStateM.Result.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">EStateM.Result.ok</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">EStateM.Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Lean/EStateM.lean#L20-L21","name":"EStateM.Result.map_error","line":20,"kind":"theorem","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_error","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_error\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε σ α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">EStateM.Result.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Result.error\">EStateM.Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">EStateM.Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Lean/EStateM.lean#L17-L18","name":"EStateM.Result.map_ok","line":17,"kind":"theorem","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_ok","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_ok\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_ok</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε σ α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">EStateM.Result.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Result.ok\">EStateM.Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">EStateM.Result.ok</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Lean/EStateM.lean#L11-L15","name":"EStateM.Result.map","line":11,"kind":"def","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map","doc":"Map a function over an `EStateM.Result`, preserving states and errors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε σ α β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">EStateM.Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">EStateM.Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></div></div>"}]}