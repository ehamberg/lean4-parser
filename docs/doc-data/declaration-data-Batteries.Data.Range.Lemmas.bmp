{"name":"Batteries.Data.Range.Lemmas","instances":[],"imports":["Init","Batteries.Tactic.SeqFocus","Batteries.Data.List.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/Range/Lemmas.lean#L101-L107","name":"Std.Range.forIn_eq_forIn_range'","line":101,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.forIn_eq_forIn_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.forIn_eq_forIn_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">forIn_eq_forIn_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.start</span> <span class=\"fn\"><span class=\"fn\">r</span>.numElems</span> <span class=\"fn\"><span class=\"fn\">r</span>.step</span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/Range/Lemmas.lean#L48-L99","name":"Std.Range.forIn'_eq_forIn_range'","line":48,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.forIn'_eq_forIn_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.forIn'_eq_forIn_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">forIn'_eq_forIn_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Attach.html#List.pmap\">List.pmap</a> <span class=\"fn\">Subtype.mk</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.start</span> <span class=\"fn\"><span class=\"fn\">r</span>.numElems</span> <span class=\"fn\"><span class=\"fn\">r</span>.step</span>)</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Membership.mem\">Membership.mem</a> <span class=\"fn\">r</span>)</span></span>) =&gt;\n    <span class=\"fn\">match (motive := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Membership.mem\">Membership.mem</a> <span class=\"fn\">r</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>) <span class=\"fn\">x</span> with\n    | <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">h</span>⟩</span> =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/Range/Lemmas.lean#L39-L46","name":"Std.Range.mem_range'_elems","line":39,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.mem_range'_elems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.mem_range'_elems\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">mem_range'_elems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.start</span> <span class=\"fn\"><span class=\"fn\">r</span>.numElems</span> <span class=\"fn\"><span class=\"fn\">r</span>.step</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/Range/Lemmas.lean#L25-L26","name":"Std.Range.numElems_step_1","line":25,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems_step_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems_step_1\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">numElems_step_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(start stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">start</span> := <span class=\"fn\">start</span>, <span class=\"fn\">stop</span> := <span class=\"fn\">stop</span>, <span class=\"fn\">step</span> := <span class=\"fn\">1</span> }</span>.numElems</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">start</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/Range/Lemmas.lean#L19-L23","name":"Std.Range.numElems_stop_le_start","line":19,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems_stop_le_start","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems_stop_le_start\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">numElems_stop_le_start</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.stop</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.start</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.numElems</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/Range/Lemmas.lean#L11-L17","name":"Std.Range.numElems","line":11,"kind":"def","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems","doc":"The number of elements contained in a `Std.Range`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">numElems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"}]}