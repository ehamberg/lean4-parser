{"name":"Batteries.Data.String.Lemmas","instances":[],"imports":["Init","Batteries.Data.Char","Batteries.Data.List.Lemmas","Batteries.Data.String.Basic","Batteries.Tactic.Lint.Misc","Batteries.Tactic.SeqFocus"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1094-L1095","name":"String.data_dropWhile","line":1094,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_dropWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.dropWhile</span> <span class=\"fn\">p</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1091-L1092","name":"String.dropWhile_eq","line":1091,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.dropWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.dropWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">dropWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.dropWhile</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1088-L1089","name":"String.data_takeWhile","line":1088,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_takeWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.takeWhile</span> <span class=\"fn\">p</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1085-L1086","name":"String.takeWhile_eq","line":1085,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.takeWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.takeWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">takeWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.takeWhile</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1083-L1083","name":"String.data_take","line":1083,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_take\"><span class=\"name\">String</span>.<span class=\"name\">data_take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.take</span> <span class=\"fn\">n</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1080-L1081","name":"String.take_eq","line":1080,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.take_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.take_eq\"><span class=\"name\">String</span>.<span class=\"name\">take_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.take</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1078-L1078","name":"String.drop_empty","line":1078,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.drop_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.drop_empty\"><span class=\"name\">String</span>.<span class=\"name\">drop_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.drop</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1076-L1076","name":"String.data_drop","line":1076,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_drop\"><span class=\"name\">String</span>.<span class=\"name\">data_drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.drop</span> <span class=\"fn\">n</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1073-L1074","name":"String.drop_eq","line":1073,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.drop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.drop_eq\"><span class=\"name\">String</span>.<span class=\"name\">drop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.drop</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1062-L1064","name":"Substring.Valid.data_dropWhile","line":1062,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.dropWhile</span> <span class=\"fn\">p</span>)</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1059-L1060","name":"Substring.Valid.dropWhile","line":1059,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.dropWhile</span> <span class=\"fn\">p</span>)</span>.Valid</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1055-L1057","name":"Substring.Valid.data_takeWhile","line":1055,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.takeWhile</span> <span class=\"fn\">p</span>)</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1052-L1053","name":"Substring.Valid.takeWhile","line":1052,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.takeWhile</span> <span class=\"fn\">p</span>)</span>.Valid</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1049-L1050","name":"Substring.Valid.contains","line":1049,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.contains</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1046-L1047","name":"Substring.Valid.all","line":1046,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.all\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.all</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span>.all</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1043-L1044","name":"Substring.Valid.any","line":1043,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.any\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.any</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span>.any</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1040-L1041","name":"Substring.Valid.foldr","line":1040,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1037-L1038","name":"Substring.Valid.foldl","line":1037,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1028-L1035","name":"Substring.Valid.toString_extract","line":1028,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.toString_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.toString_extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toString_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\"><span class=\"fn\">s</span>.toString</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.extract</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span>)</span>.toString</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.extract</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1020-L1026","name":"Substring.Valid.extract","line":1020,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\"><span class=\"fn\">s</span>.toString</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.extract</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span>)</span>.Valid</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1017-L1018","name":"Substring.Valid.atEnd","line":1017,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.atEnd</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.utf8ByteSize</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1012-L1013","name":"Substring.Valid.data_take","line":1012,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.take</span> <span class=\"fn\">n</span>)</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1009-L1010","name":"Substring.Valid.take","line":1009,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.take</span> <span class=\"fn\">n</span>)</span>.Valid</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1006-L1007","name":"Substring.Valid.data_drop","line":1006,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.drop</span> <span class=\"fn\">n</span>)</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1003-L1004","name":"Substring.Valid.drop","line":1003,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.drop</span> <span class=\"fn\">n</span>)</span>.Valid</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L1000-L1001","name":"Substring.Valid.front","line":1000,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.front\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.front</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L994-L998","name":"Substring.Valid.prevn","line":994,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span></span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.prevn</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span>)</span></span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L988-L992","name":"Substring.Valid.nextn","line":988,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span></span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.nextn</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span>)</span></span></span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L985-L986","name":"Substring.Valid.nextn_stop","line":985,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.nextn</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.bsize</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.bsize</span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L979-L983","name":"Substring.Valid.prev","line":979,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.prev</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L976-L977","name":"Substring.Valid.next_stop","line":976,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.bsize</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.bsize</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L970-L974","name":"Substring.Valid.next","line":970,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.next\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L965-L968","name":"Substring.Valid.get","line":965,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.get\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L962-L963","name":"Substring.Valid.isEmpty","line":962,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.isEmpty</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L959-L960","name":"Substring.Valid.bsize","line":959,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bsize</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L956-L957","name":"String.valid_toSubstring","line":956,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.valid_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.valid_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">valid_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toSubstring</span>.Valid</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L953-L954","name":"Substring.Valid.valid","line":953,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.Valid</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L941-L951","name":"Substring.Valid.validFor","line":941,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.validFor\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span> → <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L928-L933","name":"Substring.ValidFor.dropWhile","line":928,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.dropWhile</span> <span class=\"fn\">p</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L921-L926","name":"Substring.ValidFor.takeWhile","line":921,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.takeWhile</span> <span class=\"fn\">p</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L918-L919","name":"Substring.ValidFor.contains","line":918,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.contains</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L915-L916","name":"Substring.ValidFor.all","line":915,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.all\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.all</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.all</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L912-L913","name":"Substring.ValidFor.any","line":912,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.any\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.any</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.any</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L909-L910","name":"Substring.ValidFor.foldr","line":909,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L906-L907","name":"Substring.ValidFor.foldl","line":906,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L889-L902","name":"Substring.ValidFor.extract","line":889,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r ml mm mr : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">ml</span> <span class=\"fn\">mm</span> <span class=\"fn\">mr</span> <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span></span> →\n    <span class=\"fn\">∃ (<span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l'</span> <span class=\"fn\">mm</span> <span class=\"fn\">r'</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.extract</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L886-L887","name":"Substring.ValidFor.atEnd","line":886,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.atEnd</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L873-L882","name":"Substring.ValidFor.take","line":873,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.take\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.take</span> <span class=\"fn\">n</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L862-L871","name":"Substring.ValidFor.drop","line":862,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.drop</span> <span class=\"fn\">n</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L859-L860","name":"Substring.ValidFor.front","line":859,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.front\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.front</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L848-L857","name":"Substring.ValidFor.prevn","line":848,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m₂ r m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.prevn</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span>)</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L836-L846","name":"Substring.ValidFor.nextn","line":836,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m₁ m₂ r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.nextn</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span>)</span></span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L832-L834","name":"Substring.ValidFor.nextn_stop","line":832,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.nextn</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L822-L830","name":"Substring.ValidFor.prev","line":822,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.prev</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L819-L820","name":"Substring.ValidFor.next_stop","line":819,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L807-L817","name":"Substring.ValidFor.next","line":807,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L804-L805","name":"Substring.ValidFor.get","line":804,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.get\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.get</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L799-L802","name":"Substring.ValidFor.toIterator","line":799,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toIterator\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\"><span class=\"fn\">l</span>.reverse</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.toIterator</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L796-L797","name":"Substring.ValidFor.toString","line":796,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toString\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toString</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L793-L794","name":"Substring.ValidFor.isEmpty","line":793,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.isEmpty</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L790-L791","name":"Substring.ValidFor.bsize","line":790,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.bsize</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L787-L788","name":"Substring.ValidFor.stopPos","line":787,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.stopPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.stopPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">stopPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L784-L785","name":"Substring.ValidFor.startPos","line":784,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.startPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.startPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">startPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L781-L782","name":"Substring.ValidFor.str","line":781,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.str\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">str</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.str</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L778-L779","name":"String.validFor_toSubstring","line":778,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.validFor_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.validFor_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">validFor_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">[]</span> <span class=\"fn\"><span class=\"fn\">s</span>.toSubstring</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L771-L776","name":"Substring.ValidFor.of_eq","line":771,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.of_eq\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.str</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L768-L769","name":"Substring.ValidFor.valid","line":768,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.Valid</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L763-L764","name":"Substring.ValidFor.mk","line":763,"kind":"ctor","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.mk","doc":"The constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span>\n  <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span>,\n    <span class=\"fn\">stopPos</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L760-L764","name":"Substring.ValidFor","line":760,"kind":"inductive","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor","doc":"A substring is represented by three lists `l m r`, where `m` is the middle section\n(the actual substring) and `l ++ m ++ r` is the underlying string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L758-L758","name":"Substring.Valid_default","line":758,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid_default\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid_default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">default</span>.Valid</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L756-L756","name":"Substring.Valid.le","line":756,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.le","doc":"The stop position of a substring is at least the start. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.le\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">s</span>.Valid</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L754-L754","name":"Substring.Valid.stopValid","line":754,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.stopValid","doc":"The stop position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.stopValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">stopValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">s</span>.Valid</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L752-L752","name":"Substring.Valid.startValid","line":752,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.startValid","doc":"The start position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.startValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">startValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><span class=\"fn\">s</span>.Valid</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.startPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L750-L750","name":"Substring.Valid.mk","line":750,"kind":"ctor","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(startValid : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.startPos</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopValid : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.Valid</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L749-L756","name":"Substring.Valid","line":749,"kind":"structure","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid","doc":"Validity for a substring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L730-L741","name":"String.takeWhileAux_of_valid","line":730,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.takeWhileAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.takeWhileAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">takeWhileAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhileAux\">Substring.takeWhileAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> <span class=\"fn\">p</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L723-L724","name":"String.map_eq","line":723,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.map_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.map_eq\"><span class=\"name\">String</span>.<span class=\"name\">map_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.map\">String.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L713-L721","name":"String.mapAux_of_valid","line":713,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.mapAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.mapAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">mapAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.mapAux\">String.mapAux</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">r</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L710-L711","name":"String.contains_iff","line":710,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.contains_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.contains_iff\"><span class=\"name\">String</span>.<span class=\"name\">contains_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.contains</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L708-L708","name":"String.all_iff","line":708,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.all_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.all_iff\"><span class=\"name\">String</span>.<span class=\"name\">all_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.all</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L705-L706","name":"String.all_eq","line":705,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.all_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.all_eq\"><span class=\"name\">String</span>.<span class=\"name\">all_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.all</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span>.all</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L703-L703","name":"String.any_iff","line":703,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.any_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.any_iff\"><span class=\"name\">String</span>.<span class=\"name\">any_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.any</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L700-L701","name":"String.any_eq","line":700,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.any_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.any_eq\"><span class=\"name\">String</span>.<span class=\"name\">any_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.any</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span>.any</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L687-L698","name":"String.anyAux_of_valid","line":687,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.anyAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.anyAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">anyAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>.anyAux</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.any</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L684-L685","name":"String.foldr_eq","line":684,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldr_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldr_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldr_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldr\">String.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L673-L682","name":"String.foldrAux_of_valid","line":673,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldrAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldrAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldrAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldrAux\">String.foldrAux</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L670-L671","name":"String.foldl_eq","line":670,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldl_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldl\">String.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L659-L668","name":"String.foldlAux_of_valid","line":659,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldlAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldlAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldlAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldlAux\">String.foldlAux</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L656-L657","name":"String.offsetOfPos_of_valid","line":656,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.offsetOfPos_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.offsetOfPos_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPos_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>.offsetOfPos</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L644-L654","name":"String.offsetOfPosAux_of_valid","line":644,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPosAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>.offsetOfPosAux</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m</span>.length</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L637-L639","name":"String.Iterator.Valid.prevn","line":637,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">it</span>.Valid</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.prevn</span> <span class=\"fn\">n</span>)</span>.Valid</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L633-L635","name":"String.Iterator.Valid.remainingToString","line":633,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.remainingToString</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">r</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L631-L631","name":"String.Iterator.Valid.toEnd","line":631,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.toEnd</span>.Valid</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L626-L629","name":"String.Iterator.Valid.setCurr","line":626,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.setCurr</span> <span class=\"fn\">c</span>)</span>.Valid</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L620-L624","name":"String.Iterator.Valid.prev","line":620,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.prev</span>.Valid</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L614-L618","name":"String.Iterator.Valid.next","line":614,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.hasNext</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.next</span>.Valid</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L611-L612","name":"String.Iterator.Valid.remainingBytes_le","line":611,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingBytes_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.Valid</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.remainingBytes</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span>.utf8ByteSize</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L609-L609","name":"String.valid_mkIterator","line":609,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.valid_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.valid_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">valid_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.mkIterator</span>.Valid</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L605-L607","name":"String.Iterator.Valid.validFor","line":605,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.validFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.Valid</span> → <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L593-L599","name":"String.Iterator.ValidFor.prevn","line":593,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.length</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span>)</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.prevn</span> <span class=\"fn\">n</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L585-L591","name":"String.Iterator.ValidFor.nextn","line":585,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.length</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span>)</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.nextn</span> <span class=\"fn\">n</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L581-L583","name":"String.Iterator.ValidFor.remainingToString","line":581,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.remainingToString</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">r</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L572-L579","name":"String.Iterator.ValidFor.extract","line":572,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.extract\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it₁ it₂ : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">it₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">it₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it₁</span>.extract</span> <span class=\"fn\">it₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L568-L570","name":"String.Iterator.ValidFor.toEnd'","line":568,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span>.data</span>.reverse</span> <span class=\"fn\">[]</span> <span class=\"fn\"><span class=\"fn\">it</span>.toEnd</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L564-L566","name":"String.Iterator.ValidFor.toEnd","line":564,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">[]</span> <span class=\"fn\"><span class=\"fn\">it</span>.toEnd</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L561-L562","name":"String.Iterator.ValidFor.setCurr","line":561,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.setCurr</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L552-L559","name":"String.Iterator.ValidFor.setCurr'","line":552,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c</span>)</span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.setCurr</span> <span class=\"fn\">c</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L549-L550","name":"String.Iterator.ValidFor.hasPrev","line":549,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.hasPrev</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L546-L547","name":"String.Iterator.ValidFor.hasNext","line":546,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasNext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.hasNext</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L540-L544","name":"String.Iterator.ValidFor.atEnd","line":540,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.atEnd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L534-L538","name":"String.Iterator.ValidFor.prev_nil","line":534,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">it</span>.prev</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L525-L532","name":"String.Iterator.ValidFor.prev","line":525,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\"><span class=\"fn\">it</span>.prev</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L519-L523","name":"String.Iterator.ValidFor.next","line":519,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">it</span>.next</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L516-L517","name":"String.Iterator.ValidFor.curr","line":516,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.curr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.curr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">curr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.curr</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.headD</span> <span class=\"fn\">default</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L512-L514","name":"String.Iterator.ValidFor.pos_eq_endPos","line":512,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span>.endPos</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L509-L510","name":"String.Iterator.ValidFor.pos_eq_zero","line":509,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L506-L507","name":"String.Iterator.ValidFor.pos","line":506,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L503-L504","name":"String.Iterator.ValidFor.toString","line":503,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reverseAux</span> <span class=\"fn\">r</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L500-L501","name":"String.Iterator.ValidFor.remainingBytes","line":500,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.remainingBytes</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">r</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L498-L498","name":"String.validFor_mkIterator","line":498,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.validFor_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.validFor_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">validFor_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\"><span class=\"fn\">s</span>.mkIterator</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L495-L496","name":"String.Iterator.ValidFor.of_eq","line":495,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reverseAux</span> <span class=\"fn\">r</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L492-L493","name":"String.Iterator.ValidFor.mk'","line":492,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">l</span>.reverse</span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L489-L490","name":"String.Iterator.ValidFor.out'","line":489,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">l</span>.reverse</span></span> }</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L486-L487","name":"String.Iterator.ValidFor.out","line":486,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reverseAux</span> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L483-L484","name":"String.Iterator.ValidFor.valid","line":483,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.Valid</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L476-L477","name":"String.Iterator.ValidFor.mk","line":476,"kind":"ctor","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk","doc":"The canonical constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reverseAux</span> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L473-L477","name":"String.Iterator.ValidFor","line":473,"kind":"inductive","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor","doc":"`it.ValidFor l r` means that `it` is a string iterator whose underlying string is\n`l.reverse ++ r`, and where the cursor is pointing at the end of `l.reverse`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L470-L471","name":"String.Iterator.Valid","line":470,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid","doc":"Validity for a string iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L466-L468","name":"String.Iterator.hasNext_cons_addChar","line":466,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> }</span>.hasNext</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i</span> }</span>.hasNext</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L463-L464","name":"String.Iterator.forward_eq_nextn","line":463,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward_eq_nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.forward\">String.Iterator.forward</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\">String.Iterator.nextn</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L459-L459","name":"String.nil_append","line":459,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.nil_append","doc":"**Alias** of `String.empty_append`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.nil_append\"><span class=\"name\">String</span>.<span class=\"name\">nil_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L458-L458","name":"String.append_nil","line":458,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.append_nil","doc":"**Alias** of `String.append_empty`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.append_nil\"><span class=\"name\">String</span>.<span class=\"name\">append_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">&quot;&quot;</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L455-L456","name":"String.data_join","line":455,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_join\"><span class=\"name\">String</span>.<span class=\"name\">data_join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.join\">String.join</a> <span class=\"fn\">ss</span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">String.data</a> <span class=\"fn\">ss</span>)</span>.flatten</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L451-L453","name":"String.join_eq.go","line":451,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.join_eq.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.join_eq.go\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">String.data</a> <span class=\"fn\">ss</span>)</span>.flatten</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L450-L453","name":"String.join_eq","line":450,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.join_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.join_eq\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.join\">String.join</a> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">String.data</a> <span class=\"fn\">ss</span>)</span>.flatten</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L445-L446","name":"String.toString_toSubstring","line":445,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.toString_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.toString_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">toString_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.toSubstring</span>.toString</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L440-L441","name":"String.split_of_valid","line":440,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.split_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.split_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">split_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.split</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">String.mk</a> <span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.splitOnP\">List.splitOnP</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L420-L438","name":"String.splitAux_of_valid","line":420,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.splitAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.splitAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">splitAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>.splitAux</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">String.mk</a> <span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.splitOnP.go\">List.splitOnP.go</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">m</span>.reverse</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L412-L418","name":"String.extract_of_valid","line":412,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">extract_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>.extract</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L404-L410","name":"String.extract_zero_endPos","line":404,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract_zero_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract_zero_endPos\"><span class=\"name\">String</span>.<span class=\"name\">extract_zero_endPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.extract</span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">s</span>.endPos</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L399-L402","name":"String.extract_cons_addChar","line":399,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span> }</span>.extract</span> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>.extract</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L395-L397","name":"String.extract.go₁_zero_utf8Len","line":395,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_zero_utf8Len</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">s</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L387-L393","name":"String.extract.go₁_append_right","line":387,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_append_right\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_append_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">t</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L381-L385","name":"String.extract.go₁_cons_addChar","line":381,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">cs</span> <span class=\"fn\">0</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L368-L379","name":"String.extract.go₁_add_right_cancel","line":368,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i b e n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L360-L366","name":"String.extract.go₂_append_left","line":360,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₂_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₂_append_left\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_append_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L349-L358","name":"String.extract.go₂_add_right_cancel","line":349,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i e n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L344-L347","name":"String.firstDiffPos_eq","line":344,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a b : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.firstDiffPos</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span>)</span></span>)</span> <span class=\"fn\"><span class=\"fn\">a</span>.data</span> <span class=\"fn\"><span class=\"fn\">b</span>.data</span>)</span>.fst</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L314-L342","name":"String.firstDiffPos_loop_eq","line":314,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_loop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_loop_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_loop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ l₂ r₁ r₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl₁ : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₁</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl₂ : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hstop : <span class=\"fn\"><span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">r₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">r₂</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.firstDiffPos.loop\">String.firstDiffPos.loop</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₁</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₂</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">stop</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span>)</span></span>)</span> <span class=\"fn\">r₁</span> <span class=\"fn\">r₂</span>)</span>.fst</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L310-L312","name":"String.revFind_of_valid","line":310,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revFind_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revFind_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFind_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.revFind</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">x</span></span> }</span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span>.reverse</span>)</span>.tail?</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L296-L308","name":"String.revFindAux_of_valid","line":296,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revFindAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revFindAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFindAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.reverse</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>.revFindAux</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">x</span></span> }</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">l</span>)</span>.tail?</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L293-L294","name":"String.find_of_valid","line":293,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.find_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.find_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">find_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.find</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span>)</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L273-L291","name":"String.findAux_of_valid","line":273,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.findAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.findAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">findAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l m r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>.findAux</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">m</span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L271-L271","name":"String.revPosOf_eq","line":271,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revPosOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revPosOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.revPosOf</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.revFind</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L268-L268","name":"String.revPosOfAux_eq","line":268,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revPosOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revPosOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.revPosOfAux</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.revFindAux</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L265-L265","name":"String.posOf_eq","line":265,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.posOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.posOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.posOf</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.find</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L262-L262","name":"String.posOfAux_eq","line":262,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.posOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.posOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.posOfAux</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.findAux</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L256-L259","name":"String.atEnd_of_valid","line":256,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.atEnd_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.atEnd_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span>.atEnd</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L251-L254","name":"String.back_eq","line":251,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.back_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.back_eq\"><span class=\"name\">String</span>.<span class=\"name\">back_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.back</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span>.getLastD</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L248-L249","name":"String.front_eq","line":248,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.front_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.front_eq\"><span class=\"name\">String</span>.<span class=\"name\">front_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.front</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span>.headD</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L242-L246","name":"String.prev_of_valid'","line":242,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.prev_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.prev_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span>.prev</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">cs</span>.dropLast</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L236-L240","name":"String.prev_of_valid","line":236,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.prev_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.prev_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span></span></span> }</span>.prev</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L221-L234","name":"String.utf8PrevAux_of_valid","line":221,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8PrevAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8PrevAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\">String.utf8PrevAux</a> <span class=\"fn\">(<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L214-L219","name":"String.valid_next","line":214,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.valid_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.valid_next\"><span class=\"name\">String</span>.<span class=\"name\">valid_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.endPos</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.next</span> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L211-L212","name":"String.atEnd_iff","line":211,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.atEnd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.atEnd_iff\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.atEnd</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.endPos</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L208-L209","name":"String.next_of_valid","line":208,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.next_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.next_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span></span></span> }</span>.next</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L204-L206","name":"String.next_of_valid'","line":204,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.next_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.next_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span>.next</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs'</span>.headD</span> <span class=\"fn\">default</span>)</span>.utf8Size</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L200-L202","name":"String.modify_of_valid","line":200,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.modify_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.modify_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">modify_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span>.modify</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">f</span> <span class=\"fn\">cs'</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L196-L198","name":"String.set_of_valid","line":196,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.set_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.set_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">set_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span>.set</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">c'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span>)</span> <span class=\"fn\">cs'</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L184-L194","name":"String.utf8SetAux_of_valid","line":184,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8SetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8SetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">String.utf8SetAux</a> <span class=\"fn\">c'</span> <span class=\"fn\">(<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span>)</span> <span class=\"fn\">cs'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L181-L182","name":"String.get?_of_valid","line":181,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.get?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.get?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span>.get?</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs'</span>.head?</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L169-L179","name":"String.utf8GetAux?_of_valid","line":169,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux?\">String.utf8GetAux?</a> <span class=\"fn\">(<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs'</span>.head?</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L165-L167","name":"String.get_cons_addChar","line":165,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.get_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.get_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">get_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span> }</span>.get</span> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>.get</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L162-L163","name":"String.get_of_valid","line":162,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.get_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.get_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span>.get</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cs'</span>.headD</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L150-L160","name":"String.utf8GetAux_of_valid","line":150,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">(<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cs'</span>.headD</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L147-L148","name":"String.utf8GetAux_addChar_right_cancel","line":147,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_addChar_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L136-L145","name":"String.utf8GetAux_add_right_cancel","line":136,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i p n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L119-L134","name":"String.utf8InductionOn","line":119,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8InductionOn","doc":"Induction along the valid positions in a list of characters.\n(This definition is intended only for specification purposes.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8InductionOn\"><span class=\"name\">String</span>.<span class=\"name\">utf8InductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./foundational_types.html\">Sort</a> u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[]</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>)</span> <span class=\"fn\">p</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ind : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">cs</span> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>)</span> <span class=\"fn\">i</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L116-L117","name":"String.isEmpty_iff","line":116,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.isEmpty_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.isEmpty_iff\"><span class=\"name\">String</span>.<span class=\"name\">isEmpty_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.isEmpty</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L113-L114","name":"String.endPos_eq_zero","line":113,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.endPos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.endPos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.endPos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L108-L109","name":"String.Pos.Valid.le_endPos","line":108,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.le_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.le_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.endPos</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L106-L106","name":"String.Pos.Valid.mk","line":106,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L104-L104","name":"String.Pos.valid_endPos","line":104,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.valid_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.valid_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">s</span>.endPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L102-L102","name":"String.Pos.valid_zero","line":102,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.valid_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.valid_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L98-L100","name":"String.Pos.Valid","line":98,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.Valid","doc":"A string position is valid if it is equal to the UTF-8 length of an initial substring of `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L93-L93","name":"String.Pos.lt_addChar","line":93,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.lt_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.lt_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L86-L86","name":"String.endPos_eq","line":86,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.endPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.endPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>.endPos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L82-L83","name":"String.utf8Len_le_of_prefix","line":82,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_prefix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">cs₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L79-L80","name":"String.utf8Len_le_of_suffix","line":79,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_suffix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">cs₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L76-L77","name":"String.utf8Len_le_of_infix","line":76,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_infix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_infix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_infix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">cs₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L71-L74","name":"String.utf8Len_le_of_sublist","line":71,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_sublist\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cs₁</span>.Sublist</span> <span class=\"fn\">cs₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L66-L67","name":"String.utf8Len_eq_zero","line":66,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L64-L64","name":"String.utf8Len_reverse","line":64,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverse\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">cs</span>.reverse</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L60-L62","name":"String.utf8Len_reverseAux","line":60,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverseAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverseAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverseAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs₁ cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs₁</span>.reverseAux</span> <span class=\"fn\">cs₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L57-L58","name":"String.utf8Len_append","line":57,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_append\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs₁ cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\">cs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L55-L55","name":"String.utf8Len_cons","line":55,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_cons\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.utf8Size</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L53-L53","name":"String.utf8Len_nil","line":53,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_nil\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L51-L51","name":"String.utf8ByteSize_mk","line":51,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize_mk\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>.utf8ByteSize</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L49-L49","name":"String.utf8ByteSize.go_eq","line":49,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize.go_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize.go_eq\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize</span>.<span class=\"name\">go_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize.go\">String.utf8ByteSize.go</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L46-L47","name":"String.utf8Len","line":46,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len","doc":"The UTF-8 byte length of a list of characters. (This is intended for specification purposes.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L33-L33","name":"String.mk_length","line":33,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.mk_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.mk_length\"><span class=\"name\">String</span>.<span class=\"name\">mk_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">s</span> }</span>.length</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.length</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L31-L31","name":"String.instBEqOrd","line":31,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.instBEqOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.instBEqOrd\"><span class=\"name\">String</span>.<span class=\"name\">instBEqOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.BEqOrd\">Batteries.BEqOrd</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L28-L29","name":"String.instLTOrd","line":28,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.instLTOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.instLTOrd\"><span class=\"name\">String</span>.<span class=\"name\">instLTOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LTOrd\">Batteries.LTOrd</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L25-L26","name":"String.instTransOrd","line":25,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.instTransOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.instTransOrd\"><span class=\"name\">String</span>.<span class=\"name\">instTransOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.TransOrd\">Batteries.TransOrd</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L21-L23","name":"String.lt_antisymm","line":21,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.lt_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.lt_antisymm\"><span class=\"name\">String</span>.<span class=\"name\">lt_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₁</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/74dffd1a83cdd2969a31c9892b0517e7c6f50668/Batteries/Data/String/Lemmas.lean#L17-L19","name":"String.lt_trans","line":17,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.lt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.lt_trans\"><span class=\"name\">String</span>.<span class=\"name\">lt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ s₂ s₃ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₃</span></span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₃</span></span></span></span></div></div>"}]}